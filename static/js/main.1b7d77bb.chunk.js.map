{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["MoviePoster","_ref2","poster","alt","react_default","a","createElement","src","title","className","propType","PropTypes","string","isRequired","Movie","_ref","genres","synopsis","map","genre","index","key","App","state","_renderMovies","_this","movies","movie","console","log","src_Movie","medium_cover_image","id","_getMovies","_callee","regenerator_default","wrap","_context","prev","next","_callApi","sent","setState","stop","fetch","then","res","json","data","catch","err","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wUAmCA,SAASA,EAATC,GAAsC,IAAfC,EAAeD,EAAfC,OAAQC,EAAOF,EAAPE,IAC7B,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,IAAKL,EAAQC,IAAKA,EAAKK,MAAOL,EAAKM,UAAU,iBAN3DT,EAAYU,SAAW,CACrBR,OAAQS,IAAUC,OAAOC,WACzBV,IAAKQ,IAAUC,OAAOC,YAWxBb,EAAYU,SAAW,CACrBR,OAAQS,IAAUC,OAAOC,YAGZC,MA3Cf,SAAAC,GAAoD,IAAnCP,EAAmCO,EAAnCP,MAAON,EAA4Ba,EAA5Bb,OAAQc,EAAoBD,EAApBC,OAAQC,EAAYF,EAAZE,SACtC,OACEb,EAAAC,EAAAC,cAAA,OAAKG,UAAU,SACbL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,iBACbL,EAAAC,EAAAC,cAACN,EAAD,CAAaE,OAAQA,EAAQC,IAAKK,KAEpCJ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,iBACbL,EAAAC,EAAAC,cAAA,UAAKE,GACLJ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,gBACZO,EAAOE,IAAI,SAACC,EAAOC,GAClB,OAAOhB,EAAAC,EAAAC,cAAA,QAAMG,UAAU,cAAcY,IAAKD,GAAQD,MAGtDf,EAAAC,EAAAC,cAAA,KAAGG,UAAU,kBAAkBQ,MCmCxBK,6MA/CbC,MAAQ,KASRC,cAAgB,WAWd,OAVeC,EAAKF,MAAMG,OAAOR,IAAI,SAACS,GAEpC,OADAC,QAAQC,IAAIF,GACLvB,EAAAC,EAAAC,cAACwB,EAAD,CACLtB,MAAOmB,EAAMnB,MACbN,OAAQyB,EAAMI,mBACdV,IAAKM,EAAMK,GACXhB,OAAQW,EAAMX,OACdC,SAAUU,EAAMV,gBAMtBgB,gCAAa,SAAAC,IAAA,IAAAR,EAAA,OAAAS,EAAA9B,EAAA+B,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACUd,EAAKe,WADf,OACLd,EADKW,EAAAI,KAEXhB,EAAKiB,SAAS,CACZhB,WAHS,wBAAAW,EAAAM,SAAAT,QAObM,SAAW,WACT,OAAOI,MAAM,yDACZC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAE,GAAI,OAAIA,EAAKC,KAAKtB,SACvBuB,MAAM,SAAAC,GAAG,OAAItB,QAAQC,IAAIqB,yFA7B1BC,KAAKlB,8CAgCE,IACCP,EAAWyB,KAAK5B,MAAhBG,OACR,OACEtB,EAAAC,EAAAC,cAAA,OAAKG,UAAWiB,EAAS,MAAQ,eAC9BA,EAASyB,KAAK3B,gBAAkB,kBA1CvB4B,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvD,EAAAC,EAAAC,cAACsD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpB,KAAK,SAAAqB,GACjCA,EAAaC","file":"static/js/main.1b7d77bb.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./Movie.css\";\r\n\r\nfunction Movie({ title, poster, genres, synopsis }) {\r\n  return (\r\n    <div className=\"Movie\">\r\n      <div className=\"Movie_Columns\">\r\n        <MoviePoster poster={poster} alt={title} />\r\n      </div>\r\n      <div className=\"Movie_Columns\">\r\n        <h1>{title}</h1>\r\n        <div className=\"Movie_Geners\">\r\n          {genres.map((genre, index) => {\r\n            return <span className=\"Movie_Genre\" key={index}>{genre}</span>\r\n          })}\r\n        </div>\r\n        <p className=\"Movie_Synopsis\">{synopsis}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nMovie.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  poster: PropTypes.string.isRequired,\r\n  genres: PropTypes.array.isRequired,\r\n  synopsis: PropTypes.string.isRequired\r\n};\r\n\r\nMoviePoster.propType = {\r\n  poster: PropTypes.string.isRequired,\r\n  alt: PropTypes.string.isRequired\r\n};\r\n\r\nfunction MoviePoster({ poster, alt }) {\r\n  return <img src={poster} alt={alt} title={alt} className=\"Movie_Poster\" />;\r\n}\r\n\r\nfunction MovieGenre({ genre }) {\r\n  return <span className=\"Movie_Genre\">{genre}</span>;\r\n}\r\n\r\nMoviePoster.propType = {\r\n  poster: PropTypes.string.isRequired\r\n};\r\n\r\nexport default Movie;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Movie from \"./Movie\";\n\nclass App extends Component {\n  state = {\n\n  };\n\n  componentDidMount() {\n    this._getMovies();\n    \n  }\n\n  _renderMovies = () => {\n    const movies = this.state.movies.map((movie) => {\n      console.log(movie)\n      return <Movie \n        title={movie.title} \n        poster={movie.medium_cover_image} \n        key={movie.id} \n        genres={movie.genres}\n        synopsis={movie.synopsis}  \n      />\n    })\n    return movies\n  }\n\n  _getMovies = async () => {\n    const movies = await this._callApi()\n    this.setState({\n      movies\n    })\n  }\n\n  _callApi = () => {\n    return fetch('https://yts.am/api/v2/list_movies.json?sort_by=rating')\n    .then(res => res.json())\n    .then(json => json.data.movies)\n    .catch(err => console.log(err));\n  }\n\n  render() {\n    const { movies } = this.state;\n    return (\n      <div className={movies ? \"App\" : \"App-loading\"}>\n        {movies ? this._renderMovies() : 'Loading'}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}